{"version":3,"sources":["components/AddForm.js","components/ContactItem.js","components/ContactList.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["AddForm","name","salary","edit","handleName","handleSalary","handleSubmit","className","onSubmit","type","placeholder","value","onChange","ContactItem","contact","id","index","handleEdit","handleDelete","onClick","ContactList","contacts","handleClear","contactList","length","map","key","clearBtn","Alert","text","role","initContacts","localStorage","getItem","JSON","parse","App","useState","setContacts","show","alert","setAlert","setEdit","setId","setName","setSalary","useEffect","setItem","stringify","handleAlert","setTimeout","e","preventDefault","tempContacts","uuid","handleContacts","target","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SA2CeA,EAxCC,SAAC,GAOV,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,OACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,0BAAMC,UAAU,cAAcC,SAAUF,GACtC,yBAAKC,UAAU,YACb,yBAAKA,UAAU,OACb,2BACEE,KAAK,OACLF,UAAU,eACVG,YAAY,OACZT,KAAK,OACLU,MAAOV,EACPW,SAAUR,KAGd,yBAAKG,UAAU,OACb,2BACEE,KAAK,SACLF,UAAU,eACVG,YAAY,SACZT,KAAK,SACLU,MAAOT,EACPU,SAAUP,MAIhB,4BAAQE,UAAU,mCACfJ,EAAO,OAAS,SACjB,kBAAC,IAAD,CAAQI,UAAU,iBCdXM,EApBK,SAAC,GAKd,IAAD,IAJJC,QAAWC,EAIP,EAJOA,GAAId,EAIX,EAJWA,KAAMC,EAIjB,EAJiBA,OACrBc,EAGI,EAHJA,MACAC,EAEI,EAFJA,WACAC,EACI,EADJA,aAEA,OACE,wBAAIX,UAAU,6CACXS,EAAQ,EADX,IACc,0BAAMT,UAAU,qBAAqBN,GACjD,0BAAMM,UAAU,eAAhB,IAAgCL,GAChC,4BAAQiB,QAAS,kBAAMF,EAAWF,IAAKR,UAAU,cAC/C,kBAAC,IAAD,OAEF,4BAAQY,QAAS,kBAAMD,EAAaH,IAAKR,UAAU,gBACjD,kBAAC,IAAD,SCgBOa,EA7BK,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,YAAaJ,EAA+B,EAA/BA,aAAcD,EAAiB,EAAjBA,WACpDM,EAAcF,EAASG,OAC3BH,EAASI,KAAI,SAACX,EAASE,GAAV,OACX,kBAAC,EAAD,CACEE,aAAcA,EACdD,WAAYA,EACZH,QAASA,EACTE,MAAOA,EACPU,IAAKZ,EAAQC,GACbA,GAAID,EAAQC,QAIhB,wBAAIR,UAAU,eAAd,oBAEIoB,EAAWN,EAASG,OACxB,4BAAQL,QAASG,EAAaf,UAAU,uBAAxC,iBAEE,kBAAC,IAAD,CAAUA,UAAU,eAEpB,KACJ,OACE,oCACE,wBAAIA,UAAU,cAAcgB,GAC3BI,IClBQC,EARD,SAAC,GAAoB,IAAlBnB,EAAiB,EAAjBA,KAAMoB,EAAW,EAAXA,KACrB,OACE,yBAAKtB,UAAS,sBAAiBE,EAAjB,gBAAqCqB,KAAK,SACrDD,I,gBCEDE,EAAeC,aAAaC,QAAQ,YACtCC,KAAKC,MAAMH,aAAaC,QAAQ,aAChC,GA2HWG,EAzHH,WAAO,IAAD,EACgBC,mBAASN,GADzB,mBACTV,EADS,KACCiB,EADD,OAEUD,mBAAS,CAAEE,MAAM,IAF3B,mBAETC,EAFS,KAEFC,EAFE,OAGQJ,oBAAS,GAHjB,mBAGTlC,EAHS,KAGHuC,EAHG,OAIIL,mBAAS,GAJb,mBAITtB,EAJS,KAIL4B,EAJK,OAKQN,mBAAS,IALjB,mBAKTpC,EALS,KAKH2C,EALG,OAMYP,mBAAS,IANrB,mBAMTnC,EANS,KAMD2C,EANC,KAWhBC,qBAAU,WACRd,aAAae,QAAQ,WAAYb,KAAKc,UAAU3B,MAC/C,CAACA,IAEJ,IAoCM4B,EAAc,SAACxC,EAAMoB,GACzBY,EAAS,CAAEF,MAAM,EAAM9B,OAAMoB,SAC7BqB,YAAW,WACTT,EAAS,CAAEF,MAAM,MAChB,OA8BL,OACE,oCACGC,EAAMD,MAAQ,kBAAC,EAAD,CAAO9B,KAAM+B,EAAM/B,KAAMoB,KAAMW,EAAMX,OACpD,wBAAItB,UAAU,oBAAd,mBACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACED,aAlEW,SAAC6C,GAEpB,GADAA,EAAEC,iBACW,KAATnD,GAAeC,EAAS,EAAG,CAC7B,GAAIC,EAAM,CACR,IAAIkD,EAAehC,EAASI,KAAI,SAACX,GAC/B,OAAOA,EAAQC,KAAOA,EAAf,2BAAyBD,GAAzB,IAAkCb,OAAMC,WAAWY,KAE5DmC,EAAY,UAAW,kBACvBP,GAAQ,GACRJ,EAAYe,QAdK,SAACpD,EAAMC,GAE5BoC,EAAY,GAAD,mBAAKjB,GAAL,CAAe,CAAEN,GAAIuC,MAAQrD,OAAMC,aAc1CqD,CAAetD,EAAMC,GACrB+C,EAAY,UAAW,iBAEzBJ,EAAU,IACVD,EAAQ,SAGRK,EACE,SACA,oEA+CI9C,KAAMA,EACNF,KAAMA,EACNC,OAAQA,EACRE,WAjFS,SAAC+C,GAClBP,EAAQO,EAAEK,OAAO7C,QAiFTN,aA/EW,SAAC8C,GACpBN,EAAUM,EAAEK,OAAO7C,UAgFb,kBAAC,EAAD,CACEU,SAAUA,EACVC,YA1CU,WAClBgB,EAAY,IACZW,EAAY,SAAU,yBAyCd/B,aArCW,SAACH,GAEpB,IAAIsC,EAAehC,EAASoC,QAAO,SAAC3C,GAClC,OAAOA,EAAQC,KAAOA,KAExBuB,EAAYe,GACZJ,EAAY,SAAU,oBAgCdhC,WA7BS,SAACF,GAClB,IAAID,EAAUO,EAASqC,MAAK,SAAC5C,GAC3B,OAAOA,EAAQC,KAAOA,KAElBd,EAAiBa,EAAjBb,KAAMC,EAAWY,EAAXZ,OACZyC,EAAM5B,GAEN6B,EAAQ3C,GACR4C,EAAU3C,GACVwC,GAAQ,QAyBN,wBAAInC,UAAU,oBAAd,gBACgB,IACd,0BAAMA,UAAU,uBAAhB,IAEGc,EAASsC,QAAO,SAACC,EAAKC,GACrB,OAAOD,EAAME,SAASD,EAAK3D,UAC1B,OCjHO6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c966a09f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdSend } from \"react-icons/md\";\r\n\r\nconst AddForm = ({\r\n  name,\r\n  salary,\r\n  edit,\r\n  handleName,\r\n  handleSalary,\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form className=\"text-center\" onSubmit={handleSubmit}>\r\n      <div className=\"form-row\">\r\n        <div className=\"col\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Name\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleName}\r\n          ></input>\r\n        </div>\r\n        <div className=\"col\">\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            placeholder=\"Salary\"\r\n            name=\"salary\"\r\n            value={salary}\r\n            onChange={handleSalary}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n      <button className=\"btn btn-md btn-danger mt-2 mb-3\">\r\n        {edit ? \"Edit\" : \"Submit\"}\r\n        <MdSend className=\"deleteBtn\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddForm;\r\n","import React from \"react\";\r\nimport { MdEdit, MdDelete } from \"react-icons/md\";\r\n\r\nconst ContactItem = ({\r\n  contact: { id, name, salary },\r\n  index,\r\n  handleEdit,\r\n  handleDelete,\r\n}) => {\r\n  return (\r\n    <li className=\"list-group-item d-flex align-items-center\">\r\n      {index + 1}.<span className=\"name mr-auto ml-2\">{name}</span>\r\n      <span className=\"salary mr-3\">${salary}</span>\r\n      <button onClick={() => handleEdit(id)} className=\"myBtn edit\">\r\n        <MdEdit />\r\n      </button>\r\n      <button onClick={() => handleDelete(id)} className=\"myBtn delete\">\r\n        <MdDelete />\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactItem;\r\n","import React from \"react\";\r\nimport ContactItem from \"./ContactItem\";\r\nimport { MdDelete } from \"react-icons/md\";\r\n\r\nconst ContactList = ({ contacts, handleClear, handleDelete, handleEdit }) => {\r\n  const contactList = contacts.length ? (\r\n    contacts.map((contact, index) => (\r\n      <ContactItem\r\n        handleDelete={handleDelete}\r\n        handleEdit={handleEdit}\r\n        contact={contact}\r\n        index={index}\r\n        key={contact.id}\r\n        id={contact.id}\r\n      />\r\n    ))\r\n  ) : (\r\n    <h4 className=\"text-center\">No contacts here</h4>\r\n  );\r\n  const clearBtn = contacts.length ? (\r\n    <button onClick={handleClear} className=\"btn btn-danger my-3\">\r\n      Clear Contacts\r\n      <MdDelete className=\"deleteBtn\" />\r\n    </button>\r\n  ) : null;\r\n  return (\r\n    <>\r\n      <ul className=\"list-group\">{contactList}</ul>\r\n      {clearBtn}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\n\r\nconst Alert = ({ type, text }) => {\r\n  return (\r\n    <div className={`alert alert-${type} text-center`} role=\"alert\">\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport AddForm from \"./components/AddForm\";\nimport ContactList from \"./components/ContactList\";\nimport Alert from \"./components/Alert\";\nimport uuid from \"react-uuid\";\n// Local Storage  setup\nconst initContacts = localStorage.getItem(\"contacts\")\n  ? JSON.parse(localStorage.getItem(\"contacts\"))\n  : [];\n\nconst App = () => {\n  const [contacts, setContacts] = useState(initContacts);\n  const [alert, setAlert] = useState({ show: false });\n  const [edit, setEdit] = useState(false);\n  const [id, setId] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [salary, setSalary] = useState(\"\");\n  // console.log(contacts);\n\n  // Get data from local storage\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleName = (e) => {\n    setName(e.target.value);\n  };\n  const handleSalary = (e) => {\n    setSalary(e.target.value);\n  };\n  const handleContacts = (name, salary) => {\n    // console.log(name, salary);\n    setContacts([...contacts, { id: uuid(), name, salary }]);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (name !== \"\" && salary > 0) {\n      if (edit) {\n        let tempContacts = contacts.map((contact) => {\n          return contact.id === id ? { ...contact, name, salary } : contact;\n        });\n        handleAlert(\"success\", \"Contact Edited\");\n        setEdit(false);\n        setContacts(tempContacts);\n      } else {\n        handleContacts(name, salary);\n        handleAlert(\"success\", \"Contact Added\");\n      }\n      setSalary(\"\");\n      setName(\"\");\n    } else {\n      //Alert called\n      handleAlert(\n        \"danger\",\n        \"Name Can't be empty value and salary has to be bigger than zero\"\n      );\n    }\n  };\n  // Handle Alert\n  const handleAlert = (type, text) => {\n    setAlert({ show: true, type, text });\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 2500);\n  };\n\n  // HandleClear\n  const handleClear = () => {\n    setContacts([]);\n    handleAlert(\"danger\", \"Cleared all contacts\");\n  };\n\n  // HandleDelete\n  const handleDelete = (id) => {\n    // console.log(\"Delete\", id);\n    let tempContacts = contacts.filter((contact) => {\n      return contact.id !== id;\n    });\n    setContacts(tempContacts);\n    handleAlert(\"danger\", \"Contact deleted\");\n  };\n  // HandleEdit\n  const handleEdit = (id) => {\n    let contact = contacts.find((contact) => {\n      return contact.id === id;\n    });\n    let { name, salary } = contact;\n    setId(id);\n    // console.log(\"Edit\", id);\n    setName(name);\n    setSalary(salary);\n    setEdit(true);\n  };\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <h3 className=\"text-center my-4\">Contact Manager</h3>\n      <div className=\"container\">\n        <div className=\"card mx-auto\">\n          <AddForm\n            handleSubmit={handleSubmit}\n            edit={edit}\n            name={name}\n            salary={salary}\n            handleName={handleName}\n            handleSalary={handleSalary}\n          />\n          <ContactList\n            contacts={contacts}\n            handleClear={handleClear}\n            handleDelete={handleDelete}\n            handleEdit={handleEdit}\n          />\n        </div>\n      </div>\n\n      <h4 className=\"text-center mt-3\">\n        Total Salary:{\" \"}\n        <span className=\"badge badge-success\">\n          $\n          {contacts.reduce((acc, curr) => {\n            return acc + parseInt(curr.salary);\n          }, 0)}\n        </span>\n      </h4>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}